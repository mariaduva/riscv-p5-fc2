
pr5.elf:     file format elf32-littleriscv
pr5.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0000037c

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000478 memsz 0x00000478 flags r-x
    LOAD off    0x00002000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000068 memsz 0x00000068 flags r--

Sections:
Idx Name                        Size      VMA       LMA       File off  Algn  Flags
  0 .text                       0000011c  00000000  00000000  00001000  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text.orientacion           00000098  0000011c  0000011c  0000111c  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text.verificarColinealidad 00000178  000001b4  000001b4  000011b4  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .text.cantidadPuntos        00000050  0000032c  0000032c  0000132c  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .text.main                  000000fc  0000037c  0000037c  0000137c  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .rodata                     00000068  00010000  00010000  00002000  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .riscv.attributes           00000021  00000000  00000000  00002068  2**0  CONTENTS, READONLY
  7 .comment                    00000012  00000000  00000000  00002089  2**0  CONTENTS, READONLY
  8 .debug_info                 00000216  00000000  00000000  0000209b  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev               00000109  00000000  00000000  000022b1  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_aranges              00000038  00000000  00000000  000023ba  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_ranges               00000028  00000000  00000000  000023f2  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_macro                000006f9  00000000  00000000  0000241a  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line                 00000258  00000000  00000000  00002b13  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str                  000024ae  00000000  00000000  00002d6b  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_frame                000000ac  00000000  00000000  0000521c  2**2  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
0000011c l    d  .text.orientacion	00000000 .text.orientacion
000001b4 l    d  .text.verificarColinealidad	00000000 .text.verificarColinealidad
0000032c l    d  .text.cantidadPuntos	00000000 .text.cantidadPuntos
0000037c l    d  .text.main	00000000 .text.main
00010000 l    d  .rodata	00000000 .rodata
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 fun_c.c
00000000 l    df *ABS*	00000000 memcpy.c
0000011c g     F .text.orientacion	00000098 orientacion
00000000 g     F .text	0000011c memcpy
0000032c g     F .text.cantidadPuntos	00000050 cantidadPuntos
0000037c g     F .text.main	000000fc main
000001b4 g     F .text.verificarColinealidad	00000178 verificarColinealidad
00020000 g       *ABS*	00000000 _stack



Disassembly of section .text:

00000000 <memcpy>:
memcpy():
   0:	00a5c7b3          	xor	a5,a1,a0
   4:	0037f793          	andi	a5,a5,3
   8:	00c508b3          	add	a7,a0,a2
   c:	06079263          	bnez	a5,70 <memcpy+0x70>
  10:	00300793          	li	a5,3
  14:	04c7fe63          	bgeu	a5,a2,70 <memcpy+0x70>
  18:	00357793          	andi	a5,a0,3
  1c:	00050713          	mv	a4,a0
  20:	06079863          	bnez	a5,90 <memcpy+0x90>
  24:	ffc8f613          	andi	a2,a7,-4
  28:	fe060793          	addi	a5,a2,-32
  2c:	08f76c63          	bltu	a4,a5,c4 <memcpy+0xc4>
  30:	02c77c63          	bgeu	a4,a2,68 <memcpy+0x68>
  34:	00058693          	mv	a3,a1
  38:	00070793          	mv	a5,a4
  3c:	0006a803          	lw	a6,0(a3)
  40:	00478793          	addi	a5,a5,4
  44:	00468693          	addi	a3,a3,4
  48:	ff07ae23          	sw	a6,-4(a5)
  4c:	fec7e8e3          	bltu	a5,a2,3c <memcpy+0x3c>
  50:	fff60793          	addi	a5,a2,-1
  54:	40e787b3          	sub	a5,a5,a4
  58:	ffc7f793          	andi	a5,a5,-4
  5c:	00478793          	addi	a5,a5,4
  60:	00f70733          	add	a4,a4,a5
  64:	00f585b3          	add	a1,a1,a5
  68:	01176863          	bltu	a4,a7,78 <memcpy+0x78>
  6c:	00008067          	ret
  70:	00050713          	mv	a4,a0
  74:	ff157ce3          	bgeu	a0,a7,6c <memcpy+0x6c>
  78:	0005c783          	lbu	a5,0(a1)
  7c:	00170713          	addi	a4,a4,1
  80:	00158593          	addi	a1,a1,1
  84:	fef70fa3          	sb	a5,-1(a4)
  88:	ff1768e3          	bltu	a4,a7,78 <memcpy+0x78>
  8c:	00008067          	ret
  90:	0005c683          	lbu	a3,0(a1)
  94:	00170713          	addi	a4,a4,1
  98:	00377793          	andi	a5,a4,3
  9c:	fed70fa3          	sb	a3,-1(a4)
  a0:	00158593          	addi	a1,a1,1
  a4:	f80780e3          	beqz	a5,24 <memcpy+0x24>
  a8:	0005c683          	lbu	a3,0(a1)
  ac:	00170713          	addi	a4,a4,1
  b0:	00377793          	andi	a5,a4,3
  b4:	fed70fa3          	sb	a3,-1(a4)
  b8:	00158593          	addi	a1,a1,1
  bc:	fc079ae3          	bnez	a5,90 <memcpy+0x90>
  c0:	f65ff06f          	j	24 <memcpy+0x24>
  c4:	0045a683          	lw	a3,4(a1)
  c8:	0005a283          	lw	t0,0(a1)
  cc:	0085af83          	lw	t6,8(a1)
  d0:	00c5af03          	lw	t5,12(a1)
  d4:	0105ae83          	lw	t4,16(a1)
  d8:	0145ae03          	lw	t3,20(a1)
  dc:	0185a303          	lw	t1,24(a1)
  e0:	01c5a803          	lw	a6,28(a1)
  e4:	00d72223          	sw	a3,4(a4)
  e8:	0205a683          	lw	a3,32(a1)
  ec:	00572023          	sw	t0,0(a4)
  f0:	01f72423          	sw	t6,8(a4)
  f4:	01e72623          	sw	t5,12(a4)
  f8:	01d72823          	sw	t4,16(a4)
  fc:	01c72a23          	sw	t3,20(a4)
 100:	00672c23          	sw	t1,24(a4)
 104:	01072e23          	sw	a6,28(a4)
 108:	02d72023          	sw	a3,32(a4)
 10c:	02470713          	addi	a4,a4,36
 110:	02458593          	addi	a1,a1,36
 114:	faf768e3          	bltu	a4,a5,c4 <memcpy+0xc4>
 118:	f19ff06f          	j	30 <memcpy+0x30>

Disassembly of section .text.orientacion:

0000011c <orientacion>:
orientacion():
C:\Users\majod\OneDrive\Documents\GitHub\riscv-ws-fc2\FC2practicasWS\pr5\Debug/../fun_c.c:9
**    fun_c.c  24/03/2022
**
**-------------------------------------------------------------------*/

// Función para determinar la orientación de tres puntos
int orientacion(int x1, int y1, int x2, int y2, int x3, int y3) {
 11c:	fc010113          	addi	sp,sp,-64
 120:	02812e23          	sw	s0,60(sp)
 124:	04010413          	addi	s0,sp,64
 128:	fca42e23          	sw	a0,-36(s0)
 12c:	fcb42c23          	sw	a1,-40(s0)
 130:	fcc42a23          	sw	a2,-44(s0)
 134:	fcd42823          	sw	a3,-48(s0)
 138:	fce42623          	sw	a4,-52(s0)
 13c:	fcf42423          	sw	a5,-56(s0)
C:\Users\majod\OneDrive\Documents\GitHub\riscv-ws-fc2\FC2practicasWS\pr5\Debug/../fun_c.c:10
    int valor = (y2 - y1) * (x3 - x2) - (x2 - x1) * (y3 - y2);
 140:	fd042703          	lw	a4,-48(s0)
 144:	fd842783          	lw	a5,-40(s0)
 148:	40f70733          	sub	a4,a4,a5
 14c:	fcc42683          	lw	a3,-52(s0)
 150:	fd442783          	lw	a5,-44(s0)
 154:	40f687b3          	sub	a5,a3,a5
 158:	02f70733          	mul	a4,a4,a5
 15c:	fd442683          	lw	a3,-44(s0)
 160:	fdc42783          	lw	a5,-36(s0)
 164:	40f686b3          	sub	a3,a3,a5
 168:	fc842603          	lw	a2,-56(s0)
 16c:	fd042783          	lw	a5,-48(s0)
 170:	40f607b3          	sub	a5,a2,a5
 174:	02f687b3          	mul	a5,a3,a5
 178:	40f707b3          	sub	a5,a4,a5
 17c:	fef42623          	sw	a5,-20(s0)
C:\Users\majod\OneDrive\Documents\GitHub\riscv-ws-fc2\FC2practicasWS\pr5\Debug/../fun_c.c:12

    if (valor == 0)
 180:	fec42783          	lw	a5,-20(s0)
 184:	00079663          	bnez	a5,190 <orientacion+0x74>
C:\Users\majod\OneDrive\Documents\GitHub\riscv-ws-fc2\FC2practicasWS\pr5\Debug/../fun_c.c:13
        return 0; // Colineales
 188:	00000793          	li	a5,0
 18c:	0180006f          	j	1a4 <orientacion+0x88>
C:\Users\majod\OneDrive\Documents\GitHub\riscv-ws-fc2\FC2practicasWS\pr5\Debug/../fun_c.c:14
    else if (valor > 0)
 190:	fec42783          	lw	a5,-20(s0)
 194:	00f05663          	blez	a5,1a0 <orientacion+0x84>
C:\Users\majod\OneDrive\Documents\GitHub\riscv-ws-fc2\FC2practicasWS\pr5\Debug/../fun_c.c:15
        return 1; // En sentido horario
 198:	00100793          	li	a5,1
 19c:	0080006f          	j	1a4 <orientacion+0x88>
C:\Users\majod\OneDrive\Documents\GitHub\riscv-ws-fc2\FC2practicasWS\pr5\Debug/../fun_c.c:17
    else
        return 2; // En sentido antihorario
 1a0:	00200793          	li	a5,2
C:\Users\majod\OneDrive\Documents\GitHub\riscv-ws-fc2\FC2practicasWS\pr5\Debug/../fun_c.c:18
}
 1a4:	00078513          	mv	a0,a5
 1a8:	03c12403          	lw	s0,60(sp)
 1ac:	04010113          	addi	sp,sp,64
 1b0:	00008067          	ret

Disassembly of section .text.verificarColinealidad:

000001b4 <verificarColinealidad>:
verificarColinealidad():
C:\Users\majod\OneDrive\Documents\GitHub\riscv-ws-fc2\FC2practicasWS\pr5\Debug/../fun_c.c:21

// Función para verificar la colinealidad de los puntos
int verificarColinealidad(int puntos[][2], int n) {
 1b4:	fd010113          	addi	sp,sp,-48
 1b8:	02112623          	sw	ra,44(sp)
 1bc:	02812423          	sw	s0,40(sp)
 1c0:	03010413          	addi	s0,sp,48
 1c4:	fca42e23          	sw	a0,-36(s0)
 1c8:	fcb42c23          	sw	a1,-40(s0)
C:\Users\majod\OneDrive\Documents\GitHub\riscv-ws-fc2\FC2practicasWS\pr5\Debug/../fun_c.c:23
    // Si hay menos de 3 puntos, no pueden ser colineales
    if (n < 3)
 1cc:	fd842703          	lw	a4,-40(s0)
 1d0:	00200793          	li	a5,2
 1d4:	00e7c663          	blt	a5,a4,1e0 <verificarColinealidad+0x2c>
C:\Users\majod\OneDrive\Documents\GitHub\riscv-ws-fc2\FC2practicasWS\pr5\Debug/../fun_c.c:24
        return 0;
 1d8:	00000793          	li	a5,0
 1dc:	13c0006f          	j	318 <verificarColinealidad+0x164>
C:\Users\majod\OneDrive\Documents\GitHub\riscv-ws-fc2\FC2practicasWS\pr5\Debug/../fun_c.c:27

    // Calcular la orientación de los primeros tres puntos
    int o = orientacion(puntos[0][0], puntos[0][1], puntos[1][0], puntos[1][1], puntos[2][0], puntos[2][1]);
 1e0:	fdc42783          	lw	a5,-36(s0)
 1e4:	0007a503          	lw	a0,0(a5)
 1e8:	fdc42783          	lw	a5,-36(s0)
 1ec:	0047a583          	lw	a1,4(a5)
 1f0:	fdc42783          	lw	a5,-36(s0)
 1f4:	00878793          	addi	a5,a5,8
 1f8:	0007a603          	lw	a2,0(a5)
 1fc:	fdc42783          	lw	a5,-36(s0)
 200:	00878793          	addi	a5,a5,8
 204:	0047a683          	lw	a3,4(a5)
 208:	fdc42783          	lw	a5,-36(s0)
 20c:	01078793          	addi	a5,a5,16
 210:	0007a703          	lw	a4,0(a5)
 214:	fdc42783          	lw	a5,-36(s0)
 218:	01078793          	addi	a5,a5,16
 21c:	0047a783          	lw	a5,4(a5)
 220:	efdff0ef          	jal	ra,11c <orientacion>
 224:	fea42423          	sw	a0,-24(s0)
C:\Users\majod\OneDrive\Documents\GitHub\riscv-ws-fc2\FC2practicasWS\pr5\Debug/../fun_c.c:30

    // Comprobar la orientación de los puntos restantes
    for (int i = 3; i < n; i++) {
 228:	00300793          	li	a5,3
 22c:	fef42623          	sw	a5,-20(s0)
 230:	0d80006f          	j	308 <verificarColinealidad+0x154>
C:\Users\majod\OneDrive\Documents\GitHub\riscv-ws-fc2\FC2practicasWS\pr5\Debug/../fun_c.c:31
        int orientacion_actual = orientacion(puntos[i - 2][0], puntos[i - 2][1], puntos[i - 1][0], puntos[i - 1][1], puntos[i][0], puntos[i][1]);
 234:	fec42703          	lw	a4,-20(s0)
 238:	200007b7          	lui	a5,0x20000
 23c:	ffe78793          	addi	a5,a5,-2 # 1ffffffe <_stack+0x1ffdfffe>
 240:	00f707b3          	add	a5,a4,a5
 244:	00379793          	slli	a5,a5,0x3
 248:	fdc42703          	lw	a4,-36(s0)
 24c:	00f707b3          	add	a5,a4,a5
 250:	0007a503          	lw	a0,0(a5)
 254:	fec42703          	lw	a4,-20(s0)
 258:	200007b7          	lui	a5,0x20000
 25c:	ffe78793          	addi	a5,a5,-2 # 1ffffffe <_stack+0x1ffdfffe>
 260:	00f707b3          	add	a5,a4,a5
 264:	00379793          	slli	a5,a5,0x3
 268:	fdc42703          	lw	a4,-36(s0)
 26c:	00f707b3          	add	a5,a4,a5
 270:	0047a583          	lw	a1,4(a5)
 274:	fec42703          	lw	a4,-20(s0)
 278:	200007b7          	lui	a5,0x20000
 27c:	fff78793          	addi	a5,a5,-1 # 1fffffff <_stack+0x1ffdffff>
 280:	00f707b3          	add	a5,a4,a5
 284:	00379793          	slli	a5,a5,0x3
 288:	fdc42703          	lw	a4,-36(s0)
 28c:	00f707b3          	add	a5,a4,a5
 290:	0007a603          	lw	a2,0(a5)
 294:	fec42703          	lw	a4,-20(s0)
 298:	200007b7          	lui	a5,0x20000
 29c:	fff78793          	addi	a5,a5,-1 # 1fffffff <_stack+0x1ffdffff>
 2a0:	00f707b3          	add	a5,a4,a5
 2a4:	00379793          	slli	a5,a5,0x3
 2a8:	fdc42703          	lw	a4,-36(s0)
 2ac:	00f707b3          	add	a5,a4,a5
 2b0:	0047a683          	lw	a3,4(a5)
 2b4:	fec42783          	lw	a5,-20(s0)
 2b8:	00379793          	slli	a5,a5,0x3
 2bc:	fdc42703          	lw	a4,-36(s0)
 2c0:	00f707b3          	add	a5,a4,a5
 2c4:	0007a803          	lw	a6,0(a5)
 2c8:	fec42783          	lw	a5,-20(s0)
 2cc:	00379793          	slli	a5,a5,0x3
 2d0:	fdc42703          	lw	a4,-36(s0)
 2d4:	00f707b3          	add	a5,a4,a5
 2d8:	0047a783          	lw	a5,4(a5)
 2dc:	00080713          	mv	a4,a6
 2e0:	e3dff0ef          	jal	ra,11c <orientacion>
 2e4:	fea42223          	sw	a0,-28(s0)
C:\Users\majod\OneDrive\Documents\GitHub\riscv-ws-fc2\FC2practicasWS\pr5\Debug/../fun_c.c:34

        // Si la orientación es diferente, los puntos no son colineales
        if (orientacion_actual != o)
 2e8:	fe442703          	lw	a4,-28(s0)
 2ec:	fe842783          	lw	a5,-24(s0)
 2f0:	00f70663          	beq	a4,a5,2fc <verificarColinealidad+0x148>
C:\Users\majod\OneDrive\Documents\GitHub\riscv-ws-fc2\FC2practicasWS\pr5\Debug/../fun_c.c:35
            return 0;
 2f4:	00000793          	li	a5,0
 2f8:	0200006f          	j	318 <verificarColinealidad+0x164>
C:\Users\majod\OneDrive\Documents\GitHub\riscv-ws-fc2\FC2practicasWS\pr5\Debug/../fun_c.c:30 (discriminator 2)
    for (int i = 3; i < n; i++) {
 2fc:	fec42783          	lw	a5,-20(s0)
 300:	00178793          	addi	a5,a5,1
 304:	fef42623          	sw	a5,-20(s0)
C:\Users\majod\OneDrive\Documents\GitHub\riscv-ws-fc2\FC2practicasWS\pr5\Debug/../fun_c.c:30 (discriminator 1)
 308:	fec42703          	lw	a4,-20(s0)
 30c:	fd842783          	lw	a5,-40(s0)
 310:	f2f742e3          	blt	a4,a5,234 <verificarColinealidad+0x80>
C:\Users\majod\OneDrive\Documents\GitHub\riscv-ws-fc2\FC2practicasWS\pr5\Debug/../fun_c.c:39
    }

    // Si todos tienen la misma orientación, los puntos son colineales
    return 1;
 314:	00100793          	li	a5,1
C:\Users\majod\OneDrive\Documents\GitHub\riscv-ws-fc2\FC2practicasWS\pr5\Debug/../fun_c.c:40
}
 318:	00078513          	mv	a0,a5
 31c:	02c12083          	lw	ra,44(sp)
 320:	02812403          	lw	s0,40(sp)
 324:	03010113          	addi	sp,sp,48
 328:	00008067          	ret

Disassembly of section .text.cantidadPuntos:

0000032c <cantidadPuntos>:
cantidadPuntos():
C:\Users\majod\OneDrive\Documents\GitHub\riscv-ws-fc2\FC2practicasWS\pr5\Debug/../fun_c.c:43

// Función para calcular la cantidad de puntos en un arreglo bidimensional
int cantidadPuntos(int puntos[][2]) {
 32c:	fd010113          	addi	sp,sp,-48
 330:	02812623          	sw	s0,44(sp)
 334:	03010413          	addi	s0,sp,48
 338:	fca42e23          	sw	a0,-36(s0)
C:\Users\majod\OneDrive\Documents\GitHub\riscv-ws-fc2\FC2practicasWS\pr5\Debug/../fun_c.c:44
    int n = 0;
 33c:	fe042623          	sw	zero,-20(s0)
C:\Users\majod\OneDrive\Documents\GitHub\riscv-ws-fc2\FC2practicasWS\pr5\Debug/../fun_c.c:45
    while (puntos[n][0] != '\0') {
 340:	0100006f          	j	350 <cantidadPuntos+0x24>
C:\Users\majod\OneDrive\Documents\GitHub\riscv-ws-fc2\FC2practicasWS\pr5\Debug/../fun_c.c:46
        n++;
 344:	fec42783          	lw	a5,-20(s0)
 348:	00178793          	addi	a5,a5,1
 34c:	fef42623          	sw	a5,-20(s0)
C:\Users\majod\OneDrive\Documents\GitHub\riscv-ws-fc2\FC2practicasWS\pr5\Debug/../fun_c.c:45
    while (puntos[n][0] != '\0') {
 350:	fec42783          	lw	a5,-20(s0)
 354:	00379793          	slli	a5,a5,0x3
 358:	fdc42703          	lw	a4,-36(s0)
 35c:	00f707b3          	add	a5,a4,a5
 360:	0007a783          	lw	a5,0(a5)
 364:	fe0790e3          	bnez	a5,344 <cantidadPuntos+0x18>
C:\Users\majod\OneDrive\Documents\GitHub\riscv-ws-fc2\FC2practicasWS\pr5\Debug/../fun_c.c:48
    }
    return n;
 368:	fec42783          	lw	a5,-20(s0)
C:\Users\majod\OneDrive\Documents\GitHub\riscv-ws-fc2\FC2practicasWS\pr5\Debug/../fun_c.c:49
}
 36c:	00078513          	mv	a0,a5
 370:	02c12403          	lw	s0,44(sp)
 374:	03010113          	addi	sp,sp,48
 378:	00008067          	ret

Disassembly of section .text.main:

0000037c <main>:
main():
C:\Users\majod\OneDrive\Documents\GitHub\riscv-ws-fc2\FC2practicasWS\pr5\Debug/../fun_c.c:52


int main() {
 37c:	f7010113          	addi	sp,sp,-144
 380:	08112623          	sw	ra,140(sp)
 384:	08812423          	sw	s0,136(sp)
 388:	09010413          	addi	s0,sp,144
C:\Users\majod\OneDrive\Documents\GitHub\riscv-ws-fc2\FC2practicasWS\pr5\Debug/../fun_c.c:54
    // Ejemplo 1: Puntos colineales
    int puntos_colineales[][2] = {{1, 2}, {3, 4}, {5, 6}, {7, 8}, {9, 10}, {'\0', '\0'}}; // Se añade un marcador de final
 38c:	000107b7          	lui	a5,0x10
 390:	00078793          	mv	a5,a5
 394:	0007af03          	lw	t5,0(a5) # 10000 <main+0xfc84>
 398:	0047ae83          	lw	t4,4(a5)
 39c:	0087ae03          	lw	t3,8(a5)
 3a0:	00c7a303          	lw	t1,12(a5)
 3a4:	0107a883          	lw	a7,16(a5)
 3a8:	0147a803          	lw	a6,20(a5)
 3ac:	0187a503          	lw	a0,24(a5)
 3b0:	01c7a583          	lw	a1,28(a5)
 3b4:	0207a603          	lw	a2,32(a5)
 3b8:	0247a683          	lw	a3,36(a5)
 3bc:	0287a703          	lw	a4,40(a5)
 3c0:	02c7a783          	lw	a5,44(a5)
 3c4:	fbe42823          	sw	t5,-80(s0)
 3c8:	fbd42a23          	sw	t4,-76(s0)
 3cc:	fbc42c23          	sw	t3,-72(s0)
 3d0:	fa642e23          	sw	t1,-68(s0)
 3d4:	fd142023          	sw	a7,-64(s0)
 3d8:	fd042223          	sw	a6,-60(s0)
 3dc:	fca42423          	sw	a0,-56(s0)
 3e0:	fcb42623          	sw	a1,-52(s0)
 3e4:	fcc42823          	sw	a2,-48(s0)
 3e8:	fcd42a23          	sw	a3,-44(s0)
 3ec:	fce42c23          	sw	a4,-40(s0)
 3f0:	fcf42e23          	sw	a5,-36(s0)
C:\Users\majod\OneDrive\Documents\GitHub\riscv-ws-fc2\FC2practicasWS\pr5\Debug/../fun_c.c:55
    int n_colineales = cantidadPuntos(puntos_colineales); // Calcular el número de puntos
 3f4:	fb040793          	addi	a5,s0,-80
 3f8:	00078513          	mv	a0,a5
 3fc:	f31ff0ef          	jal	ra,32c <cantidadPuntos>
 400:	fea42623          	sw	a0,-20(s0)
C:\Users\majod\OneDrive\Documents\GitHub\riscv-ws-fc2\FC2practicasWS\pr5\Debug/../fun_c.c:57

    int sonColineales_colineales = verificarColinealidad(puntos_colineales, n_colineales);
 404:	fb040793          	addi	a5,s0,-80
 408:	fec42583          	lw	a1,-20(s0)
 40c:	00078513          	mv	a0,a5
 410:	da5ff0ef          	jal	ra,1b4 <verificarColinealidad>
 414:	fea42423          	sw	a0,-24(s0)
C:\Users\majod\OneDrive\Documents\GitHub\riscv-ws-fc2\FC2practicasWS\pr5\Debug/../fun_c.c:60

    // Ejemplo 2: Puntos no colineales
    int puntos_no_colineales[][2] = {{1, 2}, {3, 4}, {5, 6}, {7, 8}, {9, 10}, {11, 12}, {'\0', '\0'}}; // Se añade un marcador de final
 418:	000107b7          	lui	a5,0x10
 41c:	03078713          	addi	a4,a5,48 # 10030 <main+0xfcb4>
 420:	f7840793          	addi	a5,s0,-136
 424:	00070693          	mv	a3,a4
 428:	03800713          	li	a4,56
 42c:	00070613          	mv	a2,a4
 430:	00068593          	mv	a1,a3
 434:	00078513          	mv	a0,a5
 438:	bc9ff0ef          	jal	ra,0 <memcpy>
C:\Users\majod\OneDrive\Documents\GitHub\riscv-ws-fc2\FC2practicasWS\pr5\Debug/../fun_c.c:61
    int n_no_colineales = cantidadPuntos(puntos_no_colineales); // Calcular el número de puntos
 43c:	f7840793          	addi	a5,s0,-136
 440:	00078513          	mv	a0,a5
 444:	ee9ff0ef          	jal	ra,32c <cantidadPuntos>
 448:	fea42223          	sw	a0,-28(s0)
C:\Users\majod\OneDrive\Documents\GitHub\riscv-ws-fc2\FC2practicasWS\pr5\Debug/../fun_c.c:63

    int sonColineales_no_colineales = verificarColinealidad(puntos_no_colineales, n_no_colineales);
 44c:	f7840793          	addi	a5,s0,-136
 450:	fe442583          	lw	a1,-28(s0)
 454:	00078513          	mv	a0,a5
 458:	d5dff0ef          	jal	ra,1b4 <verificarColinealidad>
 45c:	fea42023          	sw	a0,-32(s0)
C:\Users\majod\OneDrive\Documents\GitHub\riscv-ws-fc2\FC2practicasWS\pr5\Debug/../fun_c.c:65

    return 0;
 460:	00000793          	li	a5,0
C:\Users\majod\OneDrive\Documents\GitHub\riscv-ws-fc2\FC2practicasWS\pr5\Debug/../fun_c.c:66
}
 464:	00078513          	mv	a0,a5
 468:	08c12083          	lw	ra,140(sp)
 46c:	08812403          	lw	s0,136(sp)
 470:	09010113          	addi	sp,sp,144
 474:	00008067          	ret
